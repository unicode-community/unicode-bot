import os
from datetime import datetime

from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext
from dotenv import find_dotenv, load_dotenv

from db.database import Database
from keyboards.builders import reply_builder
from keyboards.inline import redirect_knowdledge_base
from messages import error_no_subscr_for_knowdledge_base, knowdledge_base_welcome
from utils.states import Interview, Material, Question

load_dotenv(find_dotenv())

router = Router()

@router.message(F.text.lower() == "–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
async def knowledge_base(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        text="ü¶Ñ",
        reply_markup=reply_builder(["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
    )
    await message.answer(
        text=knowdledge_base_welcome,
        reply_markup=redirect_knowdledge_base
    )


@router.message(F.text.lower() == "–ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É")
async def topic_knowledge_base(message: types.Message, state: FSMContext, db: Database) -> None:
    await state.clear()
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_base_subscriber = (user_info is not None) and (user_info.subscription_type == "unicode_base") and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)
    if is_base_subscriber:
        await message.answer(
            text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å",
            reply_markup=reply_builder(
                text=["–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤", "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–†–µ–∑—é–º–µ —Å–æ–±–µ—Å–∞", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"],
                sizes=[3, 1]
            )
        )
    else:
        buttons = ["–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if user_info.subscription_type == "unicode_guest" else ["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        await message.answer(
            text=error_no_subscr_for_knowdledge_base,
            reply_markup=reply_builder(text=buttons, sizes=[1, 1])
        )


@router.message(F.text == "–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
async def topic_questions(message: types.Message, state: FSMContext, db: Database) -> None:
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_base_subscriber = (user_info is not None) and (user_info.subscription_type == "unicode_base") and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)
    if is_base_subscriber:
        await message.answer(
            text="–ù–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: `Python Developer`, `IOS Developer`, `Data Science` etc.)",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
        await state.update_data(topic="–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤")
        await state.set_state(Question.position)
    else:
        buttons = ["–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if user_info.subscription_type == "unicode_guest" else ["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        await message.answer(
            text=error_no_subscr_for_knowdledge_base,
            reply_markup=reply_builder(text=buttons, sizes=[1, 1])
        )
        await state.clear()


@router.message(Question.position, F.text)
async def position_questions(message: types.Message, state: FSMContext) -> None:
    await state.update_data(position=message.text)
    await message.answer(
        text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–∞–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )
    await state.set_state(Question.info)


@router.message(Question.info, F.text)
async def info_questions(message: types.Message, bot: Bot, state: FSMContext) -> None:
    await state.update_data(info=message.text)

    await message.answer(
        text="üîç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–Ω–µ—Å—É—Ç –∏—Ö –≤ –±–∞–∑—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–Ω–æ—Å–∏—à—å –≤–∫–ª–∞–¥ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )

    data = await state.get_data()
    await bot.send_message(
        chat_id=os.getenv("FORWADING_CHAT"),
        text=f"*–ü—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{message.from_user.username}, `{message.from_user.full_name}`\n\n"
         f"*1Ô∏è‚É£ –¢–æ–ø–∏–∫:* `{data['topic']}`\n"
         f"*2Ô∏è‚É£ –ü–æ–∑–∏—Ü–∏—è:* `{data['position']}`\n"
         f"*3Ô∏è‚É£ –í–æ–ø—Ä–æ—Å—ã:*\n```\n{data['info']}```",
        disable_web_page_preview=True,
        parse_mode="MarkdownV2"
    )
    await state.clear()


@router.message(F.text == "–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def topic_materials(message: types.Message, state: FSMContext, db: Database) -> None:
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_base_subscriber = (user_info is not None) and (user_info.subscription_type == "unicode_base") and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)
    if is_base_subscriber:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏, —á—Ç–æ –∑–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
        await state.update_data(topic="–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
        await state.set_state(Material.descr)
    else:
        buttons = ["–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if user_info.subscription_type == "unicode_guest" else ["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        await message.answer(
            text=error_no_subscr_for_knowdledge_base,
            reply_markup=reply_builder(text=buttons, sizes=[1, 1])
        )
        await state.clear()


@router.message(Material.descr, F.text)
async def descr_materials(message: types.Message, state: FSMContext) -> None:
    await state.update_data(descr=message.text)
    await message.answer(
        text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )
    await state.set_state(Material.info)


@router.message(Material.info, F.text)
async def info_materials(message: types.Message, bot: Bot, state: FSMContext) -> None:
    await state.update_data(info=message.text)

    await message.answer(
        text="üîó –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç —Ç–≤–æ–∏ —Å—Å—ã–ª–∫–∏ –∏ –≤–Ω–µ—Å—É—Ç –≤ –±–∞–∑—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–Ω–æ—Å–∏—à—å –≤–∫–ª–∞–¥ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )

    data = await state.get_data()
    await bot.send_message(
        chat_id=os.getenv("FORWADING_CHAT"),
        text=f"*–ü—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{message.from_user.username}, `{message.from_user.full_name}`\n\n"
         f"*1Ô∏è‚É£ –¢–æ–ø–∏–∫:* `{data['topic']}`\n"
         f"*2Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ:*\n```\n{data['descr']}```\n"
         f"*3Ô∏è‚É£ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:*\n```\n{data['info']}```",
        disable_web_page_preview=True,
        parse_mode="MarkdownV2"
    )
    await state.clear()


@router.message(F.text == "–†–µ–∑—é–º–µ —Å–æ–±–µ—Å–∞")
async def topic_interviews(message: types.Message, state: FSMContext, db: Database) -> None:
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_base_subscriber = (user_info is not None) and (user_info.subscription_type == "unicode_base") and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)
    if is_base_subscriber:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –≤—ã–∂–∏–º–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: `Python Developer`, `IOS Developer`, `Data Science` etc.)",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
        await state.update_data(topic="–†–µ–∑—é–º–µ —Å–æ–±–µ—Å–∞")
        await state.set_state(Interview.position)
    else:
        buttons = ["–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if user_info.subscription_type == "unicode_guest" else ["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        await message.answer(
            text=error_no_subscr_for_knowdledge_base,
            reply_markup=reply_builder(text=buttons, sizes=[1, 1])
        )
        await state.clear()


@router.message(Interview.position, F.text)
async def position_interviews(message: types.Message, state: FSMContext) -> None:
    await state.update_data(position=message.text)
    await message.answer(
        text="–í –∫–∞–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é —ç—Ç–æ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ?",
        reply_markup=reply_builder(["–≠—Ç–æ —Å–µ–∫—Ä–µ—Ç", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
    )
    await state.set_state(Interview.company)


@router.message(Interview.company, F.text)
async def company_interviews(message: types.Message, state: FSMContext) -> None:
    await state.update_data(company=message.text)
    await message.answer(
        text="–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ –≤—ã–∂–∏–º–∫—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )
    await state.set_state(Interview.info)


@router.message(Interview.info, F.text)
async def info_interviews(message: types.Message, bot: Bot, state: FSMContext) -> None:
    await state.update_data(info=message.text)

    await message.answer(
        text="üîç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–Ω–µ—Å—É—Ç –∏—Ö –≤ –±–∞–∑—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–Ω–æ—Å–∏—à—å –≤–∫–ª–∞–¥ –≤ –Ω–∞—à–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ!",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )

    data = await state.get_data()
    await bot.send_message(
        chat_id=os.getenv("FORWADING_CHAT"),
        text=f"*–ü—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{message.from_user.username}, `{message.from_user.full_name}`\n\n"
         f"*1Ô∏è‚É£ –¢–æ–ø–∏–∫:* `{data['topic']}`\n"
         f"*2Ô∏è‚É£ –î–æ–ª–∂–Ω–æ—Å—Ç—å:* `{data['position']}`\n"
         f"*3Ô∏è‚É£ –ö–æ–º–ø–∞–Ω–∏—è:* `{data['company']}`\n"
         f"*4Ô∏è‚É£ –í—ã–∂–∏–º–∫–∞:*\n```\n{data['info']}```",
        disable_web_page_preview=True,
        parse_mode="MarkdownV2"
    )
    await state.clear()
