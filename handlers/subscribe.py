from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from db.database import Database
from keyboards.builders import reply_builder

router = Router()

@router.message(F.text.lower() == "–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def subscribe(message: types.Message, db: Database, state: FSMContext) -> None:
    await state.clear()
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_subscriber = (user_info is not None) and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)

    if is_subscriber:
        await message.answer(
            text="–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ª—å–∑—É–π—Å—è –µ–π —Å —É–º–æ–º...",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
            reply_markup=reply_builder(text=["Unicode Base (499 ‚ÇΩ/–º–µ—Å)"])
        )


@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def unsubscribe(message: types.Message, db: Database, state: FSMContext) -> None:
    await state.clear()
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_subscriber = (user_info is not None) and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)

    if not is_subscriber:
        await message.answer(
            text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
    else:
        await db.unsubscribe_user(tg_id=message.from_user.id)
        await message.answer(
            text="–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )


@router.message(F.text == "Unicode Base (499 ‚ÇΩ/–º–µ—Å)")
async def base_subscription(message: types.Message, db: Database, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        text="‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –ó–ê–ì–õ–£–®–ö–ê. –¢–£–¢ –ë–£–î–ï–¢ –ü–†–û–¶–ï–°–° –û–ü–õ–ê–¢–´" # TODO fix this
    )

    if 1: # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        subscriber_info = {
            "tg_id": message.from_user.id,
            "subscription_type": "base",
            "subscription_start": datetime.now(),
            "subscription_end": datetime.now() + timedelta(days=30)
        }
        await db.new_subscriber(**subscriber_info)
        await message.answer(
            text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unicode üíú!",
            reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
    else:
        await message.answer(
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ",
            reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
