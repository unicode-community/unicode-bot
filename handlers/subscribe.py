import os
from datetime import datetime, timedelta

from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, PreCheckoutQuery
from dotenv import find_dotenv, load_dotenv

from db.database import Database
from keyboards.builders import reply_builder
from utils.states import Subscription

router = Router()
load_dotenv(find_dotenv())

@router.message(F.text.lower() == "–ø–æ–¥–ø–∏—Å–∫–∞")
async def subscribe(message: types.Message, db: Database, state: FSMContext):
    await state.clear()
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_subscriber = (user_info is not None) and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)
    if is_subscriber:
        await message.answer(
            text=f"–¢–∏–ø —Ç–≤–æ–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: `{user_info.subscription_type}`\n"
            f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: `{user_info.subscription_end.strftime('%d.%m.%Y %H:%M')}`",
            reply_markup=reply_builder(["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[2, 1])
        )
    else:
        await message.answer(
            text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=reply_builder(["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
        )

@router.message(F.text.lower() == "–æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def get_subscribe(message: types.Message, db: Database, state: FSMContext) -> None:
    await state.clear()
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_subscriber = (user_info is not None) and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)

    if is_subscriber:
        await message.answer(
            text="–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–ª—å–∑—É–π—Å—è –µ–π —Å —É–º–æ–º...",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç",
            reply_markup=reply_builder(text=["Unicode Base (499 ‚ÇΩ/–º–µ—Å)", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
        )


@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def unsubscribe(message: types.Message, db: Database, state: FSMContext) -> None:
    await state.clear()
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_subscriber = (user_info is not None) and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)

    if not is_subscriber:
        await message.answer(
            text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
    else:
        # await db.unsubscribe_user(tg_id=message.from_user.id)
        await message.answer(
            text="–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –ø–æ–¥–ø–∏—Å–∫—É?",
            reply_markup=reply_builder(["–î–∞", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
        )
        await state.set_state(Subscription.confirm_delete)


@router.message(Subscription.confirm_delete, F.text == "–î–∞")
async def confirm_unsubscribe(message: types.Message, db: Database, state: FSMContext) -> None:
    await state.clear()
    await db.unsubscribe_user(tg_id=message.from_user.id)
    await message.answer(
        text="–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!",
        reply_markup=reply_builder(["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )


@router.message(F.text == "Unicode Base (499 ‚ÇΩ/–º–µ—Å)")
async def base_subscription(message: types.Message, state: FSMContext, bot: Bot) -> None:
    await state.clear()

    await bot.send_invoice(
        chat_id=message.from_user.id,
        title="–¢–£–¢ –ó–ê–ì–û–õ–û–í–û–ö",
        description="–¢–£–¢ –û–ü–ò–°–ê–ù–ò–ï",
        provider_token=os.getenv("YOOKASSA_TOKEN"),
        currency="rub",
        prices=[LabeledPrice(label="Unicode Base", amount=499 * 100)],
        start_parameter="unicode_bot",
        request_timeout=60,
        payload="buy unicode base",
        photo_url="https://s7.ezgif.com/tmp/ezgif-7-f8be84ad0a.jpg",
        photo_height=500,
        photo_width=500
    )


@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True
    )

    print(pre_checkout_query)

@router.message(F.successful_payment)
async def successful_payment(message: types.Message, bot: Bot, db: Database):
    subscriber_info = {
        "tg_id": message.from_user.id,
        "subscription_type": "Unicode Base (499 ‚ÇΩ/–º–µ—Å)",
        "subscription_start": datetime.now(),
        "subscription_end": datetime.now() + timedelta(days=30)
    }
    await db.new_subscriber(**subscriber_info)
    await message.answer(
        text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Unicode üíú!",
        reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    )
    await bot.send_message(
        chat_id=os.getenv("FORWADING_CHAT"),
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}, `{message.from_user.full_name}` –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É `Unicode Base (499 ‚ÇΩ/–º–µ—Å)`",
    )
