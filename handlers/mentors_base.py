import os
from datetime import datetime

from aiogram import Bot, F, Router, types
from aiogram.fsm.context import FSMContext
from dotenv import find_dotenv, load_dotenv
from pyairtable import Api

from db.database import Database
from keyboards.builders import reply_builder
from keyboards.inline import redirect_mentors_base
from messages import error_no_subscr_for_mentors_base, mentors_instructions, mentors_welcome
from utils.states import Mentor

load_dotenv(find_dotenv())
router = Router()

api = Api(os.getenv("AIRTABLE_TOKEN"))
table = api.table(os.getenv("AIRTABLE_BASE_ID"), os.getenv("AIRTABLE_TABLE_ID"))


@router.message(F.text.lower() == "–±–∞–∑–∞ –º–µ–Ω—Ç–æ—Ä–æ–≤")
async def mentors_base(message: types.Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer(
        text="ü¶Ñ",
        reply_markup=reply_builder(text=["–°—Ç–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–º", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
    )

    await message.answer(
        text=mentors_welcome,
        reply_markup=redirect_mentors_base
    )

@router.message(F.text.lower() == "—Å—Ç–∞—Ç—å –º–µ–Ω—Ç–æ—Ä–æ–º")
async def become_mentor(message: types.Message, db: Database, state: FSMContext) -> None:
    user_info = await db.get_subscriber(user_id=message.from_user.id)
    is_subscriber = (user_info is not None) and (user_info.subscription_start <= datetime.now() <= user_info.subscription_end)

    if not is_subscriber:
        await message.answer(
            text=error_no_subscr_for_mentors_base,
            reply_markup=reply_builder(["–û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
        )
    else:
        is_mentor = await db.get_mentor(tg_id=message.from_user.id)
        if is_mentor:
            await message.answer(
                text="–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –º–µ–Ω—Ç–æ—Ä–æ–≤. –ß—Ç–æ —Å –Ω–µ–π —Å–¥–µ–ª–∞—Ç—å?",
                reply_markup=reply_builder(text=["–ò–∑–º–µ–Ω–∏—Ç—å", "–£–¥–∞–ª–∏—Ç—å", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[2, 1])
            )
        else:
            await message.answer(
                text=mentors_instructions,
                reply_markup=reply_builder(text=["–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
            )
        await state.set_state(Mentor.actions)


@router.message(Mentor.actions, F.text == "–£–¥–∞–ª–∏—Ç—å")
async def delete_mentor(message: types.Message, state: FSMContext) -> None:
    await message.answer(
        text="ü¶Ñ",
        reply_markup=reply_builder(text=["–î–∞", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"], sizes=[1, 1])
    )
    await message.answer(
        text="–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –º–µ–Ω—Ç–æ—Ä–æ–≤?",
        reply_markup=redirect_mentors_base
    )
    await state.set_state(Mentor.confirm_delete)


@router.message(Mentor.confirm_delete, F.text == "–î–∞")
async def confirm_delete_mentor(message: types.Message, bot: Bot, db: Database, state: FSMContext) -> None:
    mentor_info = await db.get_mentor(tg_id=message.from_user.id)
    try:
        table.delete(record_id=mentor_info.airtable_record_id)
        await db.delete_mentor(tg_id=message.from_user.id)
        await message.answer(
            text="ü¶Ñ",
            reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
        )
        await message.answer(
            text="–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
            reply_markup=redirect_mentors_base
        )
        await bot.send_message(
            chat_id=os.getenv("FORWADING_CHAT"),
            text=f"–ú–µ–Ω—Ç–æ—Ä @{message.from_user.username}, `{message.from_user.full_name}` —É–¥–∞–ª–∏–ª –∞–Ω–∫–µ—Ç—É",
            disable_web_page_preview=True,
            parse_mode="MarkdownV2"
        )
    except Exception as e:
        await bot.send_message(
            chat_id=os.getenv("FORWADING_CHAT"),
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –º–µ–Ω—Ç–æ—Ä–∞ @{message.from_user.username}, `{message.from_user.full_name}`\n```\n{e}```",
            disable_web_page_preview=True,
            parse_mode="MarkdownV2"
        )

    await state.clear()


@router.message(Mentor.actions, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å")
@router.message(Mentor.actions, F.text == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def fill_mentor_form(message: types.Message, db: Database, state: FSMContext) -> None:
    if message.text == "–ò–∑–º–µ–Ω–∏—Ç—å":
        await state.update_data(action="change")
    else:
        await state.update_data(action="fill")
    await state.update_data(tg_id=message.from_user.id)
    await state.update_data(tg_username=message.from_user.username)

    mentor_data_from_db = await db.get_mentor(tg_id=message.from_user.id)
    buttons = ["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if mentor_data_from_db else ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    text = "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    text += f"\n\n–°–µ–π—á–∞—Å –∏–º—è –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ: `{mentor_data_from_db.name}`" if mentor_data_from_db else ""

    await message.answer(
        text=text,
        reply_markup=reply_builder(text=buttons, sizes=[1, 1])
    )
    await state.set_state(Mentor.name)


@router.message(Mentor.name, F.text)
async def name_mentor(message: types.Message, db: Database, state: FSMContext) -> None:
    mentor_data_from_db = await db.get_mentor(tg_id=message.from_user.id)
    name = mentor_data_from_db.name if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" else message.text
    await state.update_data(name=name)
    buttons = ["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if mentor_data_from_db else ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    text = "–ü–æ –∫–∞–∫–æ–π —Ç–µ–º–µ —Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å?"
    text += f"\n\n–°–µ–π—á–∞—Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ: `{mentor_data_from_db.direction}`" if mentor_data_from_db else ""

    await message.answer(
        text=text,
        reply_markup=reply_builder(text=buttons, sizes=[1, 1] if mentor_data_from_db else [1])
    )
    await state.set_state(Mentor.direction)


@router.message(Mentor.direction, F.text)
async def direction_mentor(message: types.Message, db: Database, state: FSMContext) -> None:
    mentor_data_from_db = await db.get_mentor(tg_id=message.from_user.id)
    direction = mentor_data_from_db.direction if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" else message.text
    await state.update_data(direction=direction)

    buttons = ["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if mentor_data_from_db else ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    text = "–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π —É—Å–ª—É–≥–∏"
    text += f"\n\n–°–µ–π—á–∞—Å –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ:\n```\n{mentor_data_from_db.descr}```" if mentor_data_from_db else ""

    await message.answer(
        text=text,
        reply_markup=reply_builder(text=buttons, sizes=[1, 1] if mentor_data_from_db else [1])
    )
    await state.set_state(Mentor.descr)


@router.message(Mentor.descr, F.text)
async def descr_mentor(message: types.Message, db: Database, state: FSMContext) -> None:
    mentor_data_from_db = await db.get_mentor(tg_id=message.from_user.id)
    descr = mentor_data_from_db.descr if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" else message.text
    await state.update_data(descr=descr)

    buttons = ["–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if mentor_data_from_db else ["–ë–µ—Å–ø–ª–∞—Ç–Ω–æ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    text = "–ù–∞–ø–∏—à–∏ —Ü–µ–Ω—É —Ç–≤–æ–µ–π —É—Å–ª—É–≥–∏"
    text += f"\n\n–°–µ–π—á–∞—Å —Ü–µ–Ω–∞ –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ: `{mentor_data_from_db.price}`" if mentor_data_from_db else ""

    await message.answer(
        text=text,
        reply_markup=reply_builder(text=buttons, sizes=[2, 1] if mentor_data_from_db else [1, 1])
    )
    await state.set_state(Mentor.price)


@router.message(Mentor.price, F.text)
async def price_mentor(message: types.Message, db: Database, state: FSMContext) -> None:
    mentor_data_from_db = await db.get_mentor(tg_id=message.from_user.id)
    price = mentor_data_from_db.price if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" else message.text
    await state.update_data(price=price)

    buttons = ["–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ", "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"] if mentor_data_from_db else ["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    text = "–û—Å—Ç–∞–≤—å —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"
    text += f"\n\n–°–µ–π—á–∞—Å –∫–æ–Ω—Ç–∞–∫—Ç—ã –≤ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ: `{mentor_data_from_db.contact}`" if mentor_data_from_db else ""

    await message.answer(
        text=text,
        reply_markup=reply_builder(text=buttons, sizes=[1, 1] if mentor_data_from_db else [1])
    )

    await state.set_state(Mentor.contact)


@router.message(Mentor.contact, F.text)
async def finish_mentor_form(message: types.Message, bot: Bot, state: FSMContext, db: Database) -> None:
    mentor_data_from_db = await db.get_mentor(tg_id=message.from_user.id)
    contact = mentor_data_from_db.contact if message.text == "–û—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ" else message.text
    await state.update_data(contact=contact)

    mentor_form = await state.get_data()

    mentor_record = {
        "–ò–º—è": mentor_form["name"],
        "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": mentor_form["direction"],
        "–û–ø–∏—Å–∞–Ω–∏–µ": mentor_form["descr"],
        "–¶–µ–Ω–∞": mentor_form["price"],
        "–ö–æ–Ω—Ç–∞–∫—Ç": mentor_form["contact"],
        "tg_id": str(message.from_user.id)
    }

    action = mentor_form.pop("action")
    if action == "change":
        try:
            airtable_record_id, _, _ = table.update(mentor_data_from_db.airtable_record_id, fields=mentor_record).values()
            mentor_form["airtable_record_id"] = airtable_record_id
            await db.mentor_update(user_id=message.from_user.id, **mentor_form)
            await message.answer(
                text="ü¶Ñ",
                reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            )
            await message.answer(
                text="–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞",
                reply_markup=redirect_mentors_base
            )
            await bot.send_message(
                chat_id=os.getenv("FORWADING_CHAT"),
                text=f"@{message.from_user.username}, `{message.from_user.full_name}` –∏–∑–º–µ–Ω–∏–ª –∞–Ω–∫–µ—Ç—É –º–µ–Ω—Ç–æ—Ä–∞:\n\n"
                f"*1Ô∏è‚É£ –ò–º—è:* `{mentor_form['name']}`\n"
                f"*2Ô∏è‚É£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* `{mentor_form['direction']}`\n"
                f"*3Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ:* ```\n{mentor_form['descr']}```\n"
                f"*4Ô∏è‚É£ –¶–µ–Ω–∞:* `{mentor_form['price']}`\n"
                f"*5Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç:* `{mentor_form['contact']}`",
                disable_web_page_preview=True,
                parse_mode="MarkdownV2"
            )
        except Exception as e:
            await message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã",
                reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            )
            await bot.send_message(
                chat_id=os.getenv("FORWADING_CHAT"),
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ *–∏–∑–º–µ–Ω–µ–Ω–∏–∏* –∞–Ω–∫–µ—Ç—ã –º–µ–Ω—Ç–æ—Ä–∞ @{message.from_user.username}, `{message.from_user.full_name}`\n```\n{e}```",
                disable_web_page_preview=True,
                parse_mode="MarkdownV2"
            )
    elif action == "fill":
        try:
            airtable_record_id, _, _ = table.create(mentor_record).values()
            mentor_form["airtable_record_id"] = airtable_record_id
            await db.new_mentor(**mentor_form)
            await message.answer(
                text="ü¶Ñ",
                reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            )
            await message.answer(
                text="–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É",
                reply_markup=redirect_mentors_base
            )
            await bot.send_message(
                chat_id=os.getenv("FORWADING_CHAT"),
                text=f"@{message.from_user.username}, `{message.from_user.full_name}` —Å–æ–∑–¥–∞–ª –∞–Ω–∫–µ—Ç—É –º–µ–Ω—Ç–æ—Ä–∞:\n\n"
                f"*1Ô∏è‚É£ –ò–º—è:* `{mentor_form['name']}`\n"
                f"*2Ô∏è‚É£ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:* `{mentor_form['direction']}`\n"
                f"*3Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ:* ```\n{mentor_form['descr']}```\n"
                f"*4Ô∏è‚É£ –¶–µ–Ω–∞:* `{mentor_form['price']}`\n"
                f"*5Ô∏è‚É£ –ö–æ–Ω—Ç–∞–∫—Ç:* `{mentor_form['contact']}`",
                disable_web_page_preview=True,
                parse_mode="MarkdownV2"
            )

        except Exception as e:
            await message.answer(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã",
                reply_markup=reply_builder(text=["–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            )
            await bot.send_message(
                chat_id=os.getenv("FORWADING_CHAT"),
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ *—Å–æ–∑–¥–∞–Ω–∏–∏* –∞–Ω–∫–µ—Ç—ã –º–µ–Ω—Ç–æ—Ä–∞ @{message.from_user.username}, `{message.from_user.full_name}`\n```\n{e}```",
                disable_web_page_preview=True,
                parse_mode=None
            )

    await state.clear()
